{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "recipients"
  ],
  "properties": {
    "kernel_address": {
      "type": [
        "string",
        "null"
      ]
    },
    "lock_time": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "modules": {
      "type": [
        "array",
        "null"
      ],
      "items": {
        "$ref": "#/definitions/Module"
      }
    },
    "recipients": {
      "description": "The vector of recipients for the contract. Anytime a `Send` execute message is sent the amount sent will be divided amongst these recipients depending on their assigned weight.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AddressWeight"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "ADORecipient": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "Addr can also be a human-readable identifier used in a app contract.",
          "type": "string"
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AMPRecipient": {
      "anyOf": [
        {
          "description": "An address that is not another ADO. It is assumed that it is a valid address.",
          "type": "string"
        },
        {
          "$ref": "#/definitions/ADORecipient"
        }
      ]
    },
    "AddressWeight": {
      "type": "object",
      "required": [
        "recipient",
        "weight"
      ],
      "properties": {
        "recipient": {
          "$ref": "#/definitions/AMPRecipient"
        },
        "weight": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Module": {
      "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
      "type": "object",
      "required": [
        "address",
        "is_mutable"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "is_mutable": {
          "type": "boolean"
        },
        "module_name": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
