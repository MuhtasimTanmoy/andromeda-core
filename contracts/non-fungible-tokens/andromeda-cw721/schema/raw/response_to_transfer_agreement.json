{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Nullable_TransferAgreement",
  "anyOf": [
    {
      "$ref": "#/definitions/TransferAgreement"
    },
    {
      "type": "null"
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "PrimitivePointer": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "The address of the primitive contract.",
          "type": "string"
        },
        "key": {
          "description": "The optional key for the stored data.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "TransferAgreement": {
      "description": "A struct used to represent an agreed transfer of a token. The `purchaser` may use the `Transfer` message for this token as long as funds are provided equalling the `amount` defined in the agreement.",
      "type": "object",
      "required": [
        "amount",
        "purchaser"
      ],
      "properties": {
        "amount": {
          "description": "The amount required for the purchaser to transfer ownership of the token",
          "allOf": [
            {
              "$ref": "#/definitions/Value_for_Coin"
            }
          ]
        },
        "purchaser": {
          "description": "The address of the purchaser",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Value_for_Coin": {
      "oneOf": [
        {
          "description": "The raw value.",
          "type": "object",
          "required": [
            "raw"
          ],
          "properties": {
            "raw": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The pointer to the primitive. This SHOULD be of the same underlying type as `T`. For example, if `T` is `String`, then `PrimitivePointer` should point to a Primitive::String(..). This cannot be enforced at compile time though, so it is up to the discretion of the user.",
          "type": "object",
          "required": [
            "pointer"
          ],
          "properties": {
            "pointer": {
              "$ref": "#/definitions/PrimitivePointer"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
