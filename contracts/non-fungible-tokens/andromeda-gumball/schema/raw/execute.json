{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "andr_receive"
      ],
      "properties": {
        "andr_receive": {
          "$ref": "#/definitions/AndromedaMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "a_m_p_receive"
      ],
      "properties": {
        "a_m_p_receive": {
          "$ref": "#/definitions/AMPPkt"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GumballMintMsg"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "buy"
      ],
      "properties": {
        "buy": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_required_coin"
      ],
      "properties": {
        "update_required_coin": {
          "type": "object",
          "required": [
            "new_coin"
          ],
          "properties": {
            "new_coin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Sets price, max amount per wallet, and recipient",
      "type": "object",
      "required": [
        "set_sale_details"
      ],
      "properties": {
        "set_sale_details": {
          "type": "object",
          "required": [
            "price",
            "recipient"
          ],
          "properties": {
            "max_amount_per_wallet": {
              "description": "The amount of tokens a wallet can purchase, default is 1.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "price": {
              "description": "The price per token.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "recipient": {
              "description": "The recipient of the funds.",
              "allOf": [
                {
                  "$ref": "#/definitions/Recipient"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Automatically switches to opposite status. True means buying is allowed and minting is halted. False means the opposite.",
      "type": "object",
      "required": [
        "switch_status"
      ],
      "properties": {
        "switch_status": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "ADORecipient": {
      "description": "ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "description": "Addr can also be a human-readable identifier used in a app contract.",
          "allOf": [
            {
              "$ref": "#/definitions/AndrAddress"
            }
          ]
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AMPMsg": {
      "description": "This struct defines how the kernel parses and relays messages between ADOs It contains a simple recipient string which may use our namespacing implementation or a simple contract address If the desired recipient is via IBC then namespacing must be employed The attached message must be a binary encoded execute message for the receiving ADO Funds can be attached for an individual message and will be attached accordingly",
      "type": "object",
      "required": [
        "exit_at_error",
        "funds",
        "message",
        "recipient",
        "reply_on"
      ],
      "properties": {
        "exit_at_error": {
          "description": "Determines whether the operation should terminate or proceed upon a failed message",
          "type": "boolean"
        },
        "funds": {
          "description": "Any funds to be attached to the message, defaults to an empty vector",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "gas_limit": {
          "description": "An optional imposed gas limit for the message",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "message": {
          "description": "The message to be sent to the recipient",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "recipient": {
          "description": "The message recipient, can be a contract/wallet address or a namespaced URI",
          "type": "string"
        },
        "reply_on": {
          "description": "When the message should reply, defaults to Always",
          "allOf": [
            {
              "$ref": "#/definitions/ReplyOn"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AMPPkt": {
      "description": "An Andromeda packet contains all message protocol related data, this is what is sent between ADOs when communicating It contains an original sender, if used for authorisation the sender must be authorised The previous sender is the one who sent the message A packet may contain several messages which allows for message batching",
      "type": "object",
      "required": [
        "messages",
        "origin",
        "previous_sender"
      ],
      "properties": {
        "messages": {
          "description": "Any messages associated with the packet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AMPMsg"
          }
        },
        "origin": {
          "description": "The original sender of the packet, immutable, can be retrieved with `AMPPkt.get_origin`",
          "type": "string"
        },
        "previous_sender": {
          "description": "The previous sender of the packet, immutable, can be retrieved with `AMPPkt.get_previous_sender`",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AndrAddress": {
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "description": "Can be either an address or identifier of an ADO in a app.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AndromedaMsg": {
      "oneOf": [
        {
          "description": "Standard Messages",
          "type": "object",
          "required": [
            "receive"
          ],
          "properties": {
            "receive": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_owner"
          ],
          "properties": {
            "update_owner": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_operators"
          ],
          "properties": {
            "update_operators": {
              "type": "object",
              "required": [
                "operators"
              ],
              "properties": {
                "operators": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_app_contract"
          ],
          "properties": {
            "update_app_contract": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "withdraw"
          ],
          "properties": {
            "withdraw": {
              "type": "object",
              "properties": {
                "recipient": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Recipient"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "tokens_to_withdraw": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Withdrawal"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "register_module"
          ],
          "properties": {
            "register_module": {
              "type": "object",
              "required": [
                "module"
              ],
              "properties": {
                "module": {
                  "$ref": "#/definitions/Module"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "deregister_module"
          ],
          "properties": {
            "deregister_module": {
              "type": "object",
              "required": [
                "module_idx"
              ],
              "properties": {
                "module_idx": {
                  "$ref": "#/definitions/Uint64"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "alter_module"
          ],
          "properties": {
            "alter_module": {
              "type": "object",
              "required": [
                "module",
                "module_idx"
              ],
              "properties": {
                "module": {
                  "$ref": "#/definitions/Module"
                },
                "module_idx": {
                  "$ref": "#/definitions/Uint64"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "refresh_address"
          ],
          "properties": {
            "refresh_address": {
              "type": "object",
              "required": [
                "contract"
              ],
              "properties": {
                "contract": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "refresh_addresses"
          ],
          "properties": {
            "refresh_addresses": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "GumballMintMsg": {
      "type": "object",
      "required": [
        "extension",
        "token_id"
      ],
      "properties": {
        "extension": {
          "description": "Any custom extension used by this contract",
          "allOf": [
            {
              "$ref": "#/definitions/TokenExtension"
            }
          ]
        },
        "owner": {
          "description": "The owner of the newly minted NFT",
          "type": [
            "string",
            "null"
          ]
        },
        "token_id": {
          "description": "Unique ID of the NFT",
          "type": "string"
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "MetadataAttribute": {
      "type": "object",
      "required": [
        "trait_type",
        "value"
      ],
      "properties": {
        "display_type": {
          "description": "The string used to display the attribute, if none is provided the `key` field can be used",
          "type": [
            "string",
            "null"
          ]
        },
        "trait_type": {
          "description": "The key for the attribute",
          "type": "string"
        },
        "value": {
          "description": "The value for the attribute",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Module": {
      "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
      "type": "object",
      "required": [
        "address",
        "is_mutable"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "is_mutable": {
          "type": "boolean"
        },
        "module_name": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Recipient": {
      "oneOf": [
        {
          "description": "An address that is not another ADO. It is assumed that it is a valid address.",
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "a_d_o"
          ],
          "properties": {
            "a_d_o": {
              "$ref": "#/definitions/ADORecipient"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ReplyOn": {
      "description": "Use this to define when the contract gets a response callback. If you only need it for errors or success you can select just those in order to save gas.",
      "oneOf": [
        {
          "description": "Always perform a callback after SubMsg is processed",
          "type": "string",
          "enum": [
            "always"
          ]
        },
        {
          "description": "Only callback if SubMsg returned an error, no callback on success case",
          "type": "string",
          "enum": [
            "error"
          ]
        },
        {
          "description": "Only callback if SubMsg was successful, no callback on error case",
          "type": "string",
          "enum": [
            "success"
          ]
        },
        {
          "description": "Never make a callback - this is like the original CosmosMsg semantics",
          "type": "string",
          "enum": [
            "never"
          ]
        }
      ]
    },
    "TokenExtension": {
      "description": "https://docs.opensea.io/docs/metadata-standards Replicates OpenSea Metadata Standards",
      "type": "object",
      "required": [
        "attributes",
        "image",
        "name",
        "publisher"
      ],
      "properties": {
        "animation_url": {
          "description": "A URL to any multi-media attachments",
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "description": "The metadata of the token (if it exists)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataAttribute"
          }
        },
        "description": {
          "description": "An optional description of the token",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "A URL to the token's source",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "URL to token image",
          "type": "string"
        },
        "image_data": {
          "description": "Raw SVG image data",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "The name of the token",
          "type": "string"
        },
        "publisher": {
          "description": "The original publisher of the token",
          "type": "string"
        },
        "youtube_url": {
          "description": "A URL to a related YouTube videos",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "Withdrawal": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string"
        },
        "withdrawal_type": {
          "anyOf": [
            {
              "$ref": "#/definitions/WithdrawalType"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "WithdrawalType": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "percentage"
          ],
          "properties": {
            "percentage": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
