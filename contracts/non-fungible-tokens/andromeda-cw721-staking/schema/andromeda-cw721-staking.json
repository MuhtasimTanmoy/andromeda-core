{
  "contract_name": "andromeda-cw721-staking",
  "contract_version": "0.2.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "nft_contract",
      "reward",
      "unbonding_period"
    ],
    "properties": {
      "kernel_address": {
        "type": [
          "string",
          "null"
        ]
      },
      "nft_contract": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "reward": {
        "$ref": "#/definitions/Coin"
      },
      "unbonding_period": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "andr_receive"
        ],
        "properties": {
          "andr_receive": {
            "$ref": "#/definitions/AndromedaMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "a_m_p_receive"
        ],
        "properties": {
          "a_m_p_receive": {
            "$ref": "#/definitions/AMPPkt"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "receive_nft"
        ],
        "properties": {
          "receive_nft": {
            "$ref": "#/definitions/Cw721ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Assigns reward, and saves the unbonding time for later claim.",
        "type": "object",
        "required": [
          "unstake"
        ],
        "properties": {
          "unstake": {
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Sends back the NFT to its original owner alongside the accrued rewards",
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_allowed_contracts"
        ],
        "properties": {
          "update_allowed_contracts": {
            "type": "object",
            "required": [
              "contracts"
            ],
            "properties": {
              "contracts": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_allowed_contract"
        ],
        "properties": {
          "add_allowed_contract": {
            "type": "object",
            "required": [
              "new_contract"
            ],
            "properties": {
              "new_contract": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_allowed_contract"
        ],
        "properties": {
          "remove_allowed_contract": {
            "type": "object",
            "required": [
              "old_contract"
            ],
            "properties": {
              "old_contract": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_unbonding_period"
        ],
        "properties": {
          "update_unbonding_period": {
            "type": "object",
            "required": [
              "new_period"
            ],
            "properties": {
              "new_period": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ADORecipient": {
        "description": "ADOs use a default Receive message for handling funds, this struct states that the recipient is an ADO and may attach the data field to the Receive message",
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "description": "Addr can also be a human-readable identifier used in a app contract.",
            "allOf": [
              {
                "$ref": "#/definitions/AndrAddress"
              }
            ]
          },
          "msg": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AMPMsg": {
        "description": "This struct defines how the kernel parses and relays messages between ADOs It contains a simple recipient string which may use our namespacing implementation or a simple contract address If the desired recipient is via IBC then namespacing must be employed The attached message must be a binary encoded execute message for the receiving ADO Funds can be attached for an individual message and will be attached accordingly",
        "type": "object",
        "required": [
          "exit_at_error",
          "funds",
          "message",
          "recipient",
          "reply_on"
        ],
        "properties": {
          "exit_at_error": {
            "description": "Determines whether the operation should terminate or proceed upon a failed message",
            "type": "boolean"
          },
          "funds": {
            "description": "Any funds to be attached to the message, defaults to an empty vector",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "gas_limit": {
            "description": "An optional imposed gas limit for the message",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "message": {
            "description": "The message to be sent to the recipient",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "recipient": {
            "description": "The message recipient, can be a contract/wallet address or a namespaced URI",
            "type": "string"
          },
          "reply_on": {
            "description": "When the message should reply, defaults to Always",
            "allOf": [
              {
                "$ref": "#/definitions/ReplyOn"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AMPPkt": {
        "description": "An Andromeda packet contains all message protocol related data, this is what is sent between ADOs when communicating It contains an original sender, if used for authorisation the sender must be authorised The previous sender is the one who sent the message A packet may contain several messages which allows for message batching",
        "type": "object",
        "required": [
          "messages",
          "origin",
          "previous_sender"
        ],
        "properties": {
          "messages": {
            "description": "Any messages associated with the packet",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AMPMsg"
            }
          },
          "origin": {
            "description": "The original sender of the packet, immutable, can be retrieved with `AMPPkt.get_origin`",
            "type": "string"
          },
          "previous_sender": {
            "description": "The previous sender of the packet, immutable, can be retrieved with `AMPPkt.get_previous_sender`",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AndrAddress": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "description": "Can be either an address or identifier of an ADO in a app.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AndromedaMsg": {
        "oneOf": [
          {
            "description": "Standard Messages",
            "type": "object",
            "required": [
              "receive"
            ],
            "properties": {
              "receive": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_owner"
            ],
            "properties": {
              "update_owner": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_operators"
            ],
            "properties": {
              "update_operators": {
                "type": "object",
                "required": [
                  "operators"
                ],
                "properties": {
                  "operators": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_app_contract"
            ],
            "properties": {
              "update_app_contract": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "withdraw"
            ],
            "properties": {
              "withdraw": {
                "type": "object",
                "properties": {
                  "recipient": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Recipient"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "tokens_to_withdraw": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "$ref": "#/definitions/Withdrawal"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "register_module"
            ],
            "properties": {
              "register_module": {
                "type": "object",
                "required": [
                  "module"
                ],
                "properties": {
                  "module": {
                    "$ref": "#/definitions/Module"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "deregister_module"
            ],
            "properties": {
              "deregister_module": {
                "type": "object",
                "required": [
                  "module_idx"
                ],
                "properties": {
                  "module_idx": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "alter_module"
            ],
            "properties": {
              "alter_module": {
                "type": "object",
                "required": [
                  "module",
                  "module_idx"
                ],
                "properties": {
                  "module": {
                    "$ref": "#/definitions/Module"
                  },
                  "module_idx": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "refresh_address"
            ],
            "properties": {
              "refresh_address": {
                "type": "object",
                "required": [
                  "contract"
                ],
                "properties": {
                  "contract": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "refresh_addresses"
            ],
            "properties": {
              "refresh_addresses": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Cw721ReceiveMsg": {
        "description": "Cw721ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "msg",
          "sender",
          "token_id"
        ],
        "properties": {
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Module": {
        "description": "A struct describing a token module, provided with the instantiation message this struct is used to record the info about the module and how/if it should be instantiated",
        "type": "object",
        "required": [
          "address",
          "is_mutable"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "is_mutable": {
            "type": "boolean"
          },
          "module_name": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Recipient": {
        "anyOf": [
          {
            "description": "An address that is not another ADO. It is assumed that it is a valid address.",
            "type": "string"
          },
          {
            "$ref": "#/definitions/ADORecipient"
          }
        ]
      },
      "ReplyOn": {
        "description": "Use this to define when the contract gets a response callback. If you only need it for errors or success you can select just those in order to save gas.",
        "oneOf": [
          {
            "description": "Always perform a callback after SubMsg is processed",
            "type": "string",
            "enum": [
              "always"
            ]
          },
          {
            "description": "Only callback if SubMsg returned an error, no callback on success case",
            "type": "string",
            "enum": [
              "error"
            ]
          },
          {
            "description": "Only callback if SubMsg was successful, no callback on error case",
            "type": "string",
            "enum": [
              "success"
            ]
          },
          {
            "description": "Never make a callback - this is like the original CosmosMsg semantics",
            "type": "string",
            "enum": [
              "never"
            ]
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "Withdrawal": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "withdrawal_type": {
            "anyOf": [
              {
                "$ref": "#/definitions/WithdrawalType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WithdrawalType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "percentage"
            ],
            "properties": {
              "percentage": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "andr_query"
        ],
        "properties": {
          "andr_query": {
            "$ref": "#/definitions/AndromedaQuery"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "staked_nft"
        ],
        "properties": {
          "staked_nft": {
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "allowed_contracts"
        ],
        "properties": {
          "allowed_contracts": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unbonding_period"
        ],
        "properties": {
          "unbonding_period": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "reward"
        ],
        "properties": {
          "reward": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AndromedaQuery": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "get"
            ],
            "properties": {
              "get": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "operators"
            ],
            "properties": {
              "operators": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "kernel_address"
            ],
            "properties": {
              "kernel_address": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "original_publisher"
            ],
            "properties": {
              "original_publisher": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "block_height_upon_creation"
            ],
            "properties": {
              "block_height_upon_creation": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "is_operator"
            ],
            "properties": {
              "is_operator": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "module"
            ],
            "properties": {
              "module": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "module_ids"
            ],
            "properties": {
              "module_ids": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "version"
            ],
            "properties": {
              "version": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "allowed_contracts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_String",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "andr_query": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AndromedaQuery",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "get"
          ],
          "properties": {
            "get": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "owner": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "operators"
          ],
          "properties": {
            "operators": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "kernel_address"
          ],
          "properties": {
            "kernel_address": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "original_publisher"
          ],
          "properties": {
            "original_publisher": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "block_height_upon_creation"
          ],
          "properties": {
            "block_height_upon_creation": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "is_operator"
          ],
          "properties": {
            "is_operator": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "module"
          ],
          "properties": {
            "module": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/Uint64"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "module_ids"
          ],
          "properties": {
            "module_ids": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "version": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "reward": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Coin",
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "staked_nft": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StakedNft",
      "type": "object",
      "required": [
        "contract_address",
        "id",
        "owner",
        "reward",
        "time_of_staking"
      ],
      "properties": {
        "accrued_reward": {
          "anyOf": [
            {
              "$ref": "#/definitions/Coin"
            },
            {
              "type": "null"
            }
          ]
        },
        "contract_address": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "reward": {
          "$ref": "#/definitions/Coin"
        },
        "time_of_staking": {
          "$ref": "#/definitions/Timestamp"
        },
        "time_of_unbonding": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "unbonding_period": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint64",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  }
}
